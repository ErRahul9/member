

services:

  membership-consumer:
    container_name: membership-consumer
    build:
      context: ..
      dockerfile: Dockerfile
    network_mode: host
#    depends_on:
#      - aerospikedb
#      - recency
#      - frequency
#      - kafka
    restart: on-failure:3
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
      REDIS_RECENCY_CONNECTION: redis://127.0.0.1:40001
      REDIS_FREQUENCY_CAP_CONNECTION: redis://127.0.0.1:40011
      AEROSPIKE_HOST: 127.0.0.1
      AEROSPIKE_PORT: 3000
      AEROSPIKE_NAMESPACE: rtb
      AEROSPIKE_SET-NAME: household-profile
      AEROSPIKE_TTL-SECONDS: 7776000
      SPRING_KAFKA_BOOTSTRAP_SERVERS: 127.0.0.1:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: membership-consumer
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
      SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
      SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      SPRING_KAFKA_LISTENER_MISSING_TOPICS_FATAL: false
  #      MEMBERSHIP_ORACLE_CONSUMER: true
  #      MEMBERSHIP_MEMBERSHIP_CONSUMER: true
  #      MEMBERSHIP_IMPRESSION_CONSUMER: false
  #      MEMBERSHIP_RECENCY_CONSUMER: false

#  recency:
#    image: steelhousedev/local-redis-cluster
#    container_name: recencySettings
#    ports:
#      - "40001:40001"
#    environment:
#      REDIS_START_PORT: 40001
#    network_mode: host
#
#  frequency:
#    image: steelhousedev/local-redis-cluster
#    container_name: frequency
#    ports:
#      - "40011:40011"
#    environment:
#      REDIS_START_PORT: 40011
#    networks:
#      - redis-net
#
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    container_name: zookeeper
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - "2181:2181"
#    networks:
#      - redis-net
#
#
#  kafka:
#    image: confluentinc/cp-kafka:7.3.2
#    container_name: kafka
#    ports:
#      - "9092:9092"
#      - "29092:29092"
#    environment:
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092,PLAINTEXT_HOST://localhost:29092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_ZOOKEEPER_CONNECT: "127.0.0.1:2181"
#      KAFKA_BROKER_ID: 1
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#    networks:
#      - redis-net
#    depends_on:
#      - zookeeper
#
#  init-kafka:
#    image: confluentinc/cp-kafka:7.3.2
#    networks:
#      - redis-net
#    depends_on:
#      - kafka
#    entrypoint: [ "/bin/sh", "-c" ]
#    command: |
#      "
#      # blocks until kafka is reachable
#      kafka-topics --bootstrap-server kafka:29092 --list
#
#      echo -e 'Creating kafka topics'
#      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic membership-updates-test --replication-factor 1 --partitions 1
#
#      echo -e 'Successfully created the following topics:'
#      kafka-topics --bootstrap-server kafka:29092 --list
#      "
#
#  aerospikedb:
#    image: aerospike/aerospike-server:latest
#    container_name: aero
#    networks:
#      - redis-net
#    labels:
#      com.aerospike.description: "rtb_membership_consumer"
#    ports:
#      - "3000:3000"
#    volumes:
#      - ./aero/data:/opt/aero/data/
#    environment:
#      NAMESPACE: rtb


  tests:
    container_name: tests
    network_mode:
      host
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
#      - aerospikedb
#      - recency
#      - frequency
#      - kafka
      - membership-consumer
    environment:
      ENVIRONMENT: docker
      SERVICE: membership-consumer
      RECENCY_HOST: 127.0.0.1
      RECENCY_PORT: 40001
      FREQUENCY_HOST: 127.0.0.1
      FREQUENCY_PORT: 40011
      AEROSPIKE_HOST: 127.0.0.1
      AEROSPIKE_PORT: 3000
      KAFKA_HOST: 127.0.0.1
      KAFKA_PORT: 29092
      KAFKA_TOPIC_MEMBERSHIP_UPDATES: membership-updates
      KAFKA_TOPIC_TPA: sh-dw-generated-audiences
    command:
      - /bin/sh
      - -c
      - |
        echo "waiting 30 sec for membership-consumer to boot up"
        sleep 30
        echo "running membership-updates tests now"
        poetry run pytest -s test_membership_consumer.py
        echo "running TPA tests now"
        poetry run pytest -s test_tpa_consumer.py

networks:
  redis-net:
      driver: bridge