buildscript {
    ext.kotlin_version = '1.3.21'
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE'
        classpath 'org.ajoberstar:gradle-git:1.7.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "application"
    id "distribution"
    id "eclipse"
    id "idea"
    id "java"
    id "jacoco"
    id "maven-publish"
    id "com.github.kt3k.coveralls" version "2.8.2"

}

apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    jcenter()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven {
        url "https://steelhouse.jfrog.io/steelhouse/releases"
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
    maven {
        url "https://steelhouse.jfrog.io/steelhouse/snapshots"
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}

group 'com.steelhouse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    all {
        compile.exclude  module: 'spring-boot-starter-tomcat'
    }
    provided
    compile.extendsFrom provided
    integrationTestCompile.extendsFrom compile, testCompile
    integrationTestRuntime.extendsFrom integrationTestCompile, runtime, testRuntime
}

def isSnapshot = true
def pomVersion = version

if (System.getenv("SNAPSHOT")?.equalsIgnoreCase("FALSE")) {
    isSnapshot = false
} else {
    pomVersion += "-" + (System.getenv("BUILD_NUMBER") ?: "0") + "-SNAPSHOT"
}


sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')

    }
}

dependencies {

    //Steelhouse libs
    compile "com.steelhouse.core:domain:0.0.0.52"

    compile "org.jetbrains.kotlin:kotlin-stdlib:1.3.21"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.21"
    compile "org.jetbrains.kotlin:kotlin-reflect:1.3.21"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"

    compile 'commons-validator:commons-validator:1.4.0'
    compile group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    compile 'javax.inject:javax.inject:1'


    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-collections4:4.0'


    implementation 'org.springframework.kafka:spring-kafka:2.2.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mustache'
    implementation ('org.springframework.boot:spring-boot-starter-web')
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.springframework.boot:spring-boot-starter-jetty'

    compile 'com.google.protobuf:protobuf-java:3.6.1'
    compile group: 'com.googlecode.protobuf-java-format', name: 'protobuf-java-format', version: '1.4'

    compile 'com.beeswax:beeswax-api:2019-02-19'


    compile 'org.springframework.data:spring-data-releasetrain:Kay-SR14'
    compile 'com.amazonaws:aws-java-sdk-dynamodb:1.11.534'
    compile 'com.github.derjust:spring-data-dynamodb:5.1.0'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"

    compile "io.micrometer:micrometer-core"
    compile "io.micrometer:micrometer-registry-prometheus"

    compile 'io.lettuce:lettuce-core:5.1.6.RELEASE'


    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0'

    
    integrationTestCompile(
            'com.fasterxml.jackson.core:jackson-databind:2.8.8',
            'com.fasterxml.jackson.core:jackson-core:2.8.8',
            'com.fasterxml.uuid:java-uuid-generator:3.1.4',
            'com.ning:async-http-client:1.9.40',
            'info.cukes:cucumber-core:1.2.5',
            'info.cukes:cucumber-java:1.2.5',
            'info.cukes:cucumber-guice:1.2.5',
            'com.google.inject:guice:4.1.0',
            'info.cukes:gherkin:2.12.2',
            'info.cukes:cucumber-jvm-deps:1.0.5',
            'info.cukes:cucumber-junit:1.2.5'
    )
    integrationTestCompile('com.github.rholder:guava-retrying:2.0.0'){
        exclude group: 'com.google.guava', module: 'guava'
    }
}

springBoot {
    this.mainClassName = "com.steelhouse.membership.Application"
}

task sourceJar(type: Jar, dependsOn: classes) {

    baseName = rootProject.name
    version = pomVersion

    dependsOn configurations.runtime

    classifier = 'sources'
    from sourceSets.main.allSource
}

jar {
    version = pomVersion
    archiveName = rootProject.name + ".jar"
    exclude("application*.yml")
    manifest {
        attributes(
            "Implementation-Title": rootProject.name,
            "Implementation-Version": version,
            "Main-Class": mainClassName
        )
    }
}

bootJar {
    launchScript()
    enabled = true
    archiveName = rootProject.name + ".jar"
}

task steelhouseTar(type: Tar ){
    dependsOn bootJar
    from ('src/main/resources'){
        include '*'
        into("/")
    }

    from ('build/libs') {
        include rootProject.name + ".jar"
        into("/")
    }
}

task steelhouseZip(type: Zip ){
    dependsOn bootJar
    from ('src/main/resources'){
        include '*'
        into("/")
    }

    from ('build/libs') {
        include rootProject.name + ".jar"
        into("/")
    }
}

assemble.dependsOn steelhouseTar
assemble.dependsOn steelhouseZip

task gitTag {
    if (!isSnapshot) {
        group = "git"
        doLast {
            def grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
            grgit.remote.list().each { println it }
            def tags = grgit.tag.list()

            def tagName = 'v' + pomVersion + "-" + System.getenv("DOCKERFILE_TAG") + "-" + System.getenv("CF_SHORT_REVISION")
            def lastTagName = 'HEAD'
            if (tags.size() > 0) {
                lastTagName = tags[0].getName()
            }
            if (tagName != lastTagName && tags.size() > 1) {
                lastTagName = tags[1].getName()
            }
            def log = grgit.log {
                range lastTagName, 'HEAD'
            }
            grgit.tag.add(name: tagName, message: log, force: true)
            grgit.push(tags: true)
        }
    }
}

task incrementMinorVersion {
    if (!isSnapshot) {
        group = "git"
        def versionSplit = rootProject.version.tokenize('\\.')
        def minorVersion = Integer.parseInt(versionSplit.last() as String)
        versionSplit.pop()
        def nextMinorVersion = minorVersion + 1
        def versionFile = rootProject.file('gradle.properties')

        versionSplit.push(nextMinorVersion)
        def steelhouseVersion = versionSplit.join(".")

        rootProject.version = steelhouseVersion
        if (isSnapshot) {
            pomVersion = steelhouseVersion + "-" + (System.getenv("BUILD_NUMBER") ?: "0") + "-SNAPSHOT"
        } else {
            pomVersion = steelhouseVersion
        }
        doLast {
            versionFile.write("version=" + steelhouseVersion + "\n" + "artifactory_user=" + "${artifactory_user}" + "\n" + "artifactory_password=" + "${artifactory_password}" + "\n" + "org.gradle.jvmargs=-XX:+TieredCompilation -XX:TieredStopAtLevel=1" + "\n")
        }
    }
}

task commitVersion {
    if (!isSnapshot) {
        group = "git"
        doLast {
            def grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
            grgit.remote.list().each { println it }
            grgit.add(patterns: ['gradle.properties'], update: false)
            grgit.commit(message: 'bump minor version [skip ci]')
            grgit.push()
        }
    }
}

commitVersion.mustRunAfter incrementMinorVersion
gitTag.mustRunAfter commitVersion

publishing {
    publications {
        maven(MavenPublication) {
            artifact sourceJar {
                classifier "sources"
            }

            artifact steelhouseTar
            artifact steelhouseZip
            artifact jar

            version = pomVersion
        }

    }

    repositories {
        maven {
            if (!isSnapshot) {
                url = "https://steelhouse.jfrog.io/steelhouse/releases"
                credentials{
                    username "${artifactory_user}"
                    password "${artifactory_password}"
                }

            } else {
                url = "https://steelhouse.jfrog.io/steelhouse/snapshots"
                credentials{
                    username "${artifactory_user}"
                    password "${artifactory_password}"
                }
            }
        }
    }
}

jacoco {
    toolVersion = "0.7.9"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

task cucumber() {
    dependsOn assemble, compileTestJava, integrationTest
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.integrationTestRuntime + sourceSets.main.output + sourceSets.test.output + sourceSets.integrationTest.output
            args = ['--plugin', 'pretty', '--glue', 'cucumber.steps', 'src/integrationTest/resources/cucumber/features/']
        }
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}


task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
